@{
	ViewBag.Title = "Help";
}

<div class="row">
	<div class="col-med-12">
		<h1>{e}ventful Help</h1>
		<p>Find out how to use {e}ventful here...</p>
		<h2>Query</h2>
		<p>The <a href="/eventful/Query">Query</a> page provides detailed views of {e}ventful records. Use this page to find and inspect {e}ventful records. Queries are formatted according to the Query Language specs found below.</p>
		<h2>Aggregate</h2>
		<p>The <a href="/eventful/Aggregate">Aggregate</a> page provides grouped counts of {e}ventful records. On this page you can choose which records to include and what field to group on. Queries are formatted according to the Query Language specs found below. Reports are displayed both as an HTML table of values and a bar graph. Clicking on bars on the bar graph will take the user to the Query page with the criteria all filled in to drill down on the item clicked on.</p>
		<h2>Reports</h2>
		<p>
			<a href="/eventful/Reports">Reports</a> in {e}ventful are simply groups of saved, aggregate queries. <a href="/eventful/Reports/Create">Create</a> a new report by adding any number of {e}ventful aggregate queries. <a href="/eventful/Reports">Saved reports</a> can be viewed by anyone, at anytime. Generally speaking, relative datetimes should be used (calculated off of 'Now') for reports.
		</p>
		<h2>DateTimes</h2>
		<p>
			{e}ventful supports two different styles of DateTimes: absolute DateTimes are simply strings that reference an absolute point in time, eg. '12/1/2013 10:00:00'. Relative DateTimes are calculated off of the special 'Now' value. It is valid only to subtract amounts from Now, not add. Amounts can be subtracted from Now in units of minutes, hours, days, weeks, and months. Some examples:
		</p>
		<pre>
			 Now - 15 minutes
			 Now - 1 day
			 Now - 2 months
		</pre>
		<h2>Query Language</h2>
		<p>
			The {e}ventful query language supports powerful querying options through a reasonably simple syntax. The values in fields are referred to by field names. Field names are compared to values via a set of operators and combined with conjunctions. Depending on the operator the value may be formatted in different ways. The {e}ventful query parser tokenizes strings based on white-space, so if white-space is contained in an operator's criteria then the entire criteria needs to be surrounded with single quotes.
		</p>
		<h3>{e}ventful Groups</h3>
		<p>
			{e}ventful groups are arbitrary string values that are assigned to log items to allow for grouping of similar items.
		</p>
		<ul>
			<li>Offline</li>
			<li>Web_Admin_Backend</li>
			<li>Web_DataSite_Backend</li>
			<li>Web_Divot_Backend</li>
			<li>Web_Main_Backend</li>
			<li>WyzAntMain_Backend_Dev (originates on a dev machine)</li>
		</ul>
		<h3>Field Names</h3>
		<p>
			Since {e}ventful is largely schemaless and supports any arbitrary field names that might be thrown at it it is impossible to list all possible field names here. However, code and convention dictate that for a given type of {e}ventful log item, there will be a standard set of fields available. Additionally, ALL {e}ventful log item types will contain a Timestamp field indicating when the item was logged, an eventfulGroup field which is used to group similar items, and a unique Id field. Below is a list of currently implemented {e}ventful log item types and their corresponding fields.
		</p>
		<h4>Backend Error Log Items</h4>
		<p>
			Backend Error Log Items are items that are generated by WyzAnt's C# backend code.
		</p>
		<ul>
			<li>ApplicationName - The name of the application</li>
			<li>Message - The log message</li>
			<li>LogLevel - The NLog log level</li>
			<li>LoggerName - The name of the NLog logger</li>
			<li>HttpUser - The name of the logged in user (or 'ANON')</li>
			<li>HttpUrlReferer - The page that refered the user to the current page</li>
			<li>HttpQueryString - The current query string</li>
			<li>HttpRequestingIP - The IP address of the user requesting the page</li>
			<li>HttpUserAgent - The UserAgent of the user requesting the page</li>
			<li>HttpPage - The full URL to the page</li>
			<li>HttpRawUrl - A qualified path to the page</li>
			<li>MachineName - The server the error occurred on</li>
			<li>ExceptionType - The type of exception thrown</li>
			<li>ExceptionStackTrace - The value of the current exception's ToString()</li>
			<li>ExceptionMessage - The current exception's .Message value</li>
		</ul>
		<h3>Query Operators</h3>
		<p>Query operators are used in {e}ventful to perform comparisons in a query. Below is a list of supported query operators.</p>
		<h4>Equals (==) and Not Equals (!=)</h4>
		<p>The Equals and Not Equals operators perform simple comparison operations. They look for an exact match of the criteria passed.</p>
		<pre>
			LogLevel == Error
			ExceptionMessage == 'This is a test.'
			LogLevel != Error
			ExceptionMessage != 'This is a test.'
		</pre>
		<h4>Greater Than (&gt;), Less Than (&lt;), Greater Than or Equals (&gt;=) and Less Than or Equals (&lt;=)</h4>
		<p>These operators are for searching on numerical values.</p>
		<pre>
			NumItems > 0
			NumItems < 1
			NumItems >= 0
			NumItems <= 1
		</pre>
		<h4>In (in) and Not In (!in)</h4>
		<p>The In and Not In operators are used to compare a field to a list of values. Values are contained in parenthesis and separated by commas. NOTE: Spaces inside the parenthesis are not currently supported. This means you CANNOT use quotes to delimit a string with spaces and it also means you CANNOT put a space after a comma in the list. This shortcoming will be addressed in a future release.</p>
		<pre>
			eventfulGroup in ('Offline', 'Web_Admin_Backend')
		</pre>
		<pre>
			eventfulGroup !in ('Offline', 'Web_Admin_Backend')		
		</pre>
		<h4>Matches (matches)</h4>
		<p>The Matches operator is for performing searches within strings. It executes the supplied Regex against the specified field. Regexes should be .NET style. RegexOptions are not currently supported.</p>
		<pre>
			ExceptionMessage matches .*System.*
			ExceptionMessage matches ^Web.*
		</pre>
		<h4>Not Matches (!matches)</h4>
		<p>The Not Matches operator asserts that the specified field does NOT match the specified Regex. Like Matches, regexes should be .NET style and RegexOptions are not currently supported.</p>
		<pre>
			ExceptionMessage !matches 'might be corrupted'
			ExceptionMessage !matches 'might.*be'
		</pre>
		<h4>Not Exists (!exists)</h4>
		<p>The Not Exists operator asserts that the specified field is not a defined field in the objects returned. This is used to look for the absence of a field within a group of {e}vents. Note that unlike most other {e}ventful operators this one does not define a value after the operator, ie. all you need to specify is the field name and the '!exists' operator.</p>
		<pre>
			DeleteAfter !exists
			HttpUser !exists
		</pre>
		<h4>Exists (exists)</h4>
		<p>The Exists operator asserts taht the specified field is defined in the objects returned. This is used to look for the existence of a field within a group of {e}vents. Like the Not Exists operator this operator does not require a value after the operator.</p>
		<pre>
			DeleteAfter exists
			HttpUser exists
		</pre>
		<h3>Conjunctions</h3>
		<p>Query criteria are combined using conjunctions. Below is a list.</p>
		<ul>
			<li>
				&& - The 'and' conjunction. Records must match the criteria both before and after the '&&'
			</li>
			<li>
				|| - The 'or' conjunction. Records must match either the criteria before the '||', the criteria after the '||' or both criteria.
			</li>
		</ul>
		<pre>
			LogLevel == Error && eventfulGroup == Offline
			LogLevel == Error || eventfulGroup == Offline
		</pre>
	</div>
</div>

